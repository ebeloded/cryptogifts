/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type GiftStruct = {
  sender: string;
  redeemer: string;
  status: BigNumberish;
  giftType: BigNumberish;
  giftValue: BigNumberish;
  giftGas: BigNumberish;
};

export type GiftStructOutput = [
  string,
  string,
  number,
  number,
  BigNumber,
  BigNumber
] & {
  sender: string;
  redeemer: string;
  status: number;
  giftType: number;
  giftValue: BigNumber;
  giftGas: BigNumber;
};

export interface CryptoGiftsInterface extends ethers.utils.Interface {
  functions: {
    "get(bytes)": FunctionFragment;
    "getGiftGasValue(bytes)": FunctionFragment;
    "getMyGifts()": FunctionFragment;
    "getRequiredGas()": FunctionFragment;
    "has(bytes)": FunctionFragment;
    "hashBytes(bytes)": FunctionFragment;
    "hashHash(string)": FunctionFragment;
    "hashString(string)": FunctionFragment;
    "owner()": FunctionFragment;
    "provideTransferETH(address,bytes)": FunctionFragment;
    "putETH(bytes,uint256)": FunctionFragment;
    "redeemGift(string)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "get", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getGiftGasValue",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMyGifts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRequiredGas",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "has", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "hashBytes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "hashHash", values: [string]): string;
  encodeFunctionData(functionFragment: "hashString", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "provideTransferETH",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "putETH",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "redeemGift", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "get", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGiftGasValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMyGifts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRequiredGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "has", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hashBytes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hashHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hashString", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "provideTransferETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "putETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeemGift", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface CryptoGifts extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CryptoGiftsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    get(
      _hashHashKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[GiftStructOutput] & { gift: GiftStructOutput }>;

    getGiftGasValue(
      _hashHashKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMyGifts(overrides?: CallOverrides): Promise<[GiftStructOutput[]]>;

    getRequiredGas(overrides?: CallOverrides): Promise<[BigNumber]>;

    has(
      _hashHashKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean] & { exists: boolean }>;

    hashBytes(_key: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    hashHash(_key: string, overrides?: CallOverrides): Promise<[string]>;

    hashString(_key: string, overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    provideTransferETH(
      _receiver: string,
      _hashKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    putETH(
      _hashHashKey: BytesLike,
      _giftValue: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemGift(
      _key: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  get(
    _hashHashKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<GiftStructOutput>;

  getGiftGasValue(
    _hashHashKey: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMyGifts(overrides?: CallOverrides): Promise<GiftStructOutput[]>;

  getRequiredGas(overrides?: CallOverrides): Promise<BigNumber>;

  has(_hashHashKey: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  hashBytes(_key: BytesLike, overrides?: CallOverrides): Promise<string>;

  hashHash(_key: string, overrides?: CallOverrides): Promise<string>;

  hashString(_key: string, overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  provideTransferETH(
    _receiver: string,
    _hashKey: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  putETH(
    _hashHashKey: BytesLike,
    _giftValue: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemGift(
    _key: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    get(
      _hashHashKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<GiftStructOutput>;

    getGiftGasValue(
      _hashHashKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMyGifts(overrides?: CallOverrides): Promise<GiftStructOutput[]>;

    getRequiredGas(overrides?: CallOverrides): Promise<BigNumber>;

    has(_hashHashKey: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    hashBytes(_key: BytesLike, overrides?: CallOverrides): Promise<string>;

    hashHash(_key: string, overrides?: CallOverrides): Promise<string>;

    hashString(_key: string, overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    provideTransferETH(
      _receiver: string,
      _hashKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    putETH(
      _hashHashKey: BytesLike,
      _giftValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemGift(_key: string, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    get(_hashHashKey: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    getGiftGasValue(
      _hashHashKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMyGifts(overrides?: CallOverrides): Promise<BigNumber>;

    getRequiredGas(overrides?: CallOverrides): Promise<BigNumber>;

    has(_hashHashKey: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    hashBytes(_key: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    hashHash(_key: string, overrides?: CallOverrides): Promise<BigNumber>;

    hashString(_key: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    provideTransferETH(
      _receiver: string,
      _hashKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    putETH(
      _hashHashKey: BytesLike,
      _giftValue: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemGift(
      _key: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    get(
      _hashHashKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGiftGasValue(
      _hashHashKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMyGifts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRequiredGas(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    has(
      _hashHashKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashBytes(
      _key: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashHash(
      _key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashString(
      _key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    provideTransferETH(
      _receiver: string,
      _hashKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    putETH(
      _hashHashKey: BytesLike,
      _giftValue: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemGift(
      _key: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
